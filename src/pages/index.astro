---
import MainLayout from "../layouts/MainLayout.astro";
import Video from "../layouts/Video.astro";
import Img from "../layouts/Img.astro";
import Text from "../layouts/Text.astro";
import Typewriter from "../components/Typewriter.jsx"; 
import Typewriter2 from "../components/Typewriterv2.jsx"; 
import ParallaxContent from "../components/ParallaxContent";
import ParallaxContentSectionOne from "../components/ParallaxContentSectionOne";

const title = 'Crisis Of Transparency';
const blueBlack = '#010007';
const grayWhite= 'dae0e8';
const darkBlue = '#0a0149';
const lightBlue = '#daeafa';
const slateGray = '#96a2ba';
const lightGray = 'DDDCE2';
const mossGreen = '#adc473';
const greenWhite = 'f7fcec';
const sectionOneVids = [
	'../vids/Vid1.mp4',
	'../vids/Vid2.mp4',
	'../vids/Vid3.mp4'
]
const sectionOneTexts = [
	'This week is “Right to Know” Week in Canada and around the world.',
	'Access to information is a cornerstone of Canadian democracy, keeping governments accountable, encouraging citizen participation, and giving Canadians access to the information their taxes pay for.',
	'But the current system is in disarray.',
	'In May 2023, the Information Commissioner, the independent ombudsman for the system, appeared before Parliament…',
	'… to criticize the current system and a system that deliberately underfunded her office’s capacity to process complaints by access to information requesters.',
	'The following year, her budget was cut further.',
	'Today, the system is in sharp decline.',
	'Delays are endemic.',
	'Funding is low.',
	'Real costs are not being met.',
	'A systemic breakdown in the availability of vital government information tears at accountability frameworks, accelerating a decline in Canadian trust in government institutions.',
	'And the faltering system has wrought havoc on Canadian journalism, contributing to distrust and a plague of misinformation and disinformation fueled by the government itself.',
	'How did this happen?'
]
const sectionOneImgs = [
	'slide8',
	'slide12',
	'slide16a',
	'slide16b',
]
---

<MainLayout title={title}>
	<div class="content">
		<button id="unmuteButton">
			<img id="unmuteIcon" alt="Mute/Unmute" src="/Speaker.png"/>
		</button>
		<div class="section1" style="background-image: linear-gradient(#02000f,#dae0e8);">
			<span>
				<ParallaxContentSectionOne
					videos={sectionOneVids}
					texts={sectionOneTexts}
					imgs={sectionOneImgs}
				/>
			</span>
		</div>

		<section class="banner1" style="background-color: #dae0e8"> 
			<br>
			<br>
		</section>
		
		<div class="section2">
			<br>
			<br>
			<br>
			<br>
		</div>

		<section class="banner2" style="background-color: #daeafa">
			<br>
			<br>
		</section>

		<div class="section3" style="background-image: linear-gradient(#96a2ba,#DDDCE2);">
			<br>
			<br>
			<br>
			<br>
		</div>

		<section class="banner3" style="background-color: #96a2ba">
			<br>
			<br>
		</section>

		<div class="section4" style="background-image: linear-gradient(#adc473,#f7fcec);">
			<br>
			<br>
			<br>
			<br>
		</div>
	</div>
</MainLayout>

<script is:inline>
	setTimeout(function(){document.querySelector('.content').classList.add("showBody");}, 1000);
	
	//This gets the audio element in ordcer to play, pause and set volume
	const audio = document.getElementById('background-music');
	audio.volume = 0.05;
	// audio.play();
	
	//Observer for the text boxes, they slide in when they reach it in the html
	var observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
		if(entry.isIntersecting) {
            entry.target.classList.add('show');
		} else {
            entry.target.classList.remove('show');
        }
    });
	});
	
	let hiddenElementsIndex = document.querySelectorAll('.hidden');
	hiddenElementsIndex.forEach((el) => observer.observe(el));
	let hiddenElementsIndex2 = document.querySelectorAll('.hidden2');
	hiddenElementsIndex2.forEach((el) => observer.observe(el));

	//Observer for the videos, they will pause the music once they reach and play once they leave the video block
	var videoObserver = new IntersectionObserver((entries) => {
		entries.forEach((entry) => {
			if(entry.isIntersecting) {
				audio.pause();
				entry.target.classList.add('show');
			} else {
				// entry.target.classList.remove('show');
				audio.play();
			}
		});
	});

	const videos = document.querySelectorAll('.video');
	videos.forEach((el) => videoObserver.observe(el));

	unmuteButton.addEventListener('click', function() {
		if(audio.muted === false)
		{
			audio.muted = true;
		}
		else
		{
			audio.muted = false;
		}
	});
</script>



